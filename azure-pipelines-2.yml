trigger:
- master

pool:
  vmImage: 'windows-latest'

stages:
- stage: SetupEnvironment
  jobs:
  - job: SetupChromeDriver
    steps:
    - powershell: |
        # Download and install ChromeDriver
        Invoke-WebRequest -Uri 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/118.0.5993.70/win64/chromedriver-win64.zip' -OutFile 'chromedriver.zip'
        Expand-Archive -Path 'chromedriver.zip' -DestinationPath '$(Agent.ToolsDirectory)\chromedriver'
        Remove-Item 'chromedriver.zip'
      displayName: 'Install ChromeDriver'

- stage: BuildAndTest
  jobs:
  - job: Build
    steps:
    - checkout: self
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        options: 'test -Dsurefire.suiteXmlFiles=testng.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

    - powershell: |
        $testResultsPath = "$(System.DefaultWorkingDirectory)/surefire-reports/TEST-*.xml"
        $failedTests = Get-Content $testResultsPath | Select-String 'failure' -Context 2 | ForEach-Object { $_.Context.PreContext + $_.Context.PostContext }

        foreach ($failedTest in $failedTests) {
            # Extract test name from the failure context (you may need to adjust this based on your test output)
            $testName = $failedTest -match 'Test Name: (.+)' | Out-Null; $matches[1]

            # Construct the path to the screenshot (adjust the pattern based on your naming convention)
            $screenshotPath = "$(System.DefaultWorkingDirectory)/ScreenShot/$testName.png"

            # Check if the screenshot exists
            if (Test-Path $screenshotPath) {
                # Embed the screenshot in the Extent report
                # You should replace the following command with the appropriate Extent report update command
                Write-Host "Attaching screenshot for failed test: $testName"
                # Update Extent report with the screenshot information
                # Example: $extentReport.UpdateScreenshot($testName, $screenshotPath)
            }
            else {
                Write-Host "Screenshot not found for failed test: $testName"
            }
        }
      displayName: 'Process Test Results'
      condition: succeededOrFailed()

    - powershell: Get-ChildItem -Path "$(System.DefaultWorkingDirectory)" -Recurse
      displayName: 'List Contents of DefaultWorkingDirectory'

    - task: CopyFiles@2 
      displayName: 'Copy ExtentReport Files'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**/ExtentReport/**'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

    - task: CopyFiles@2 
      displayName: 'Copy Screenshots to: $(build.artifactstagingdirectory)/ScreenShot'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)/ScreenShot'
        Contents: '**/*.png'  # Adjust the file pattern based on your screenshot naming convention
        TargetFolder: '$(build.artifactstagingdirectory)/ScreenShot'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
